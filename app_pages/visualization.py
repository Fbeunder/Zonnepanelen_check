"""\nVisualization page module for the Zonnepanelen_check application.\n\nThis module contains the visualization page functionality.\n"""\nimport streamlit as st\nimport pandas as pd\nimport sys\nimport pathlib\n\n# Voeg de root directory toe aan het pad voor juiste imports\nsys.path.append(str(pathlib.Path(__file__).parent.parent))\nimport visualization as viz\nfrom components.data_display import show_energy_chart\n\n\ndef show_visualization_page(data_processor, config_manager):\n    """\n    Display the visualization page.\n    \n    Args:\n        data_processor: Instance of DataProcessor\n        config_manager: Instance of ConfigManager\n    """\n    st.header("Visualisatie & Analyses")\n    \n    # Check if data is loaded\n    if data_processor.data is None:\n        st.warning("Geen data geladen. Ga naar de 'Data Upload' pagina om data te laden.")\n        st.button("Naar Data Upload", on_click=lambda: setattr(st.session_state, 'active_page', 'Data Upload'))\n        return\n    \n    # Create tabs for different visualizations\n    tabs = st.tabs([\n        "Productie & Verbruik", \n        "Surplus Energie", \n        "Dagpatronen", \n        "Seizoenspatronen",\n        "Vergelijking Oplossingen"\n    ])\n    \n    # Tab 1: Production and Consumption\n    with tabs[0]:\n        st.subheader("Productie en Verbruik")\n        \n        period = st.selectbox(\n            "Periode", \n            options=["Dagelijks", "Wekelijks", "Maandelijks"],\n            index=0,\n            key="viz_tab1_period"\n        )\n        \n        period_map = {\n            "Dagelijks": "daily",\n            "Wekelijks": "weekly",\n            "Maandelijks": "monthly"\n        }\n        \n        # Show appropriate chart based on selected period\n        if period == "Dagelijks" and data_processor.daily_data is not None:\n            show_energy_chart(data_processor.daily_data, period='daily')\n        elif period == "Wekelijks" and data_processor.weekly_data is not None:\n            show_energy_chart(data_processor.weekly_data, period='weekly')\n        elif period == "Maandelijks" and data_processor.monthly_data is not None:\n            show_energy_chart(data_processor.monthly_data, period='monthly')\n    \n    # Tab 2: Surplus Energy\n    with tabs[1]:\n        st.subheader("Surplus Energie")\n        \n        period2 = st.selectbox(\n            "Periode", \n            options=["Dagelijks", "Wekelijks", "Maandelijks"],\n            index=0,\n            key="viz_tab2_period"\n        )\n        \n        # Create surplus energy chart\n        fig = viz.plot_surplus_energy(data_processor.data, period=period_map[period2])\n        st.plotly_chart(fig, use_container_width=True)\n        \n        # Add explanation\n        st.markdown("""\n        **Toelichting:**\n        \n        Het surplus toont het verschil tussen productie en verbruik:\n        - **Positieve waarden (groen)**: Meer productie dan verbruik; energie die kan worden opgeslagen\n        - **Negatieve waarden (rood)**: Meer verbruik dan productie; energie die moet worden ingekocht\n        \n        De grafiek geeft inzicht in hoeveel energie potentieel beschikbaar is voor opslag.\n        """)\n    \n    # Tab 3: Daily Patterns\n    with tabs[2]:\n        st.subheader("Dagpatronen")\n        \n        # Get hourly averages\n        hourly_data = data_processor.get_hourly_averages()\n        \n        if not hourly_data.empty:\n            # Create custom chart using plotly\n            import plotly.graph_objects as go\n            \n            fig = go.Figure()\n            \n            # Add production trace\n            if 'Energy Produced (kWh)' in hourly_data.columns:\n                fig.add_trace(go.Scatter(\n                    x=hourly_data['hour'],\n                    y=hourly_data['Energy Produced (kWh)'],\n                    name='Gemiddelde Productie',\n                    mode='lines',\n                    line=dict(color='rgba(50, 171, 96, 1)', width=3)\n                ))\n            \n            # Add consumption trace\n            if 'Energy Consumed (kWh)' in hourly_data.columns:\n                fig.add_trace(go.Scatter(\n                    x=hourly_data['hour'],\n                    y=hourly_data['Energy Consumed (kWh)'],\n                    name='Gemiddelde Verbruik',\n                    mode='lines',\n                    line=dict(color='rgba(219, 64, 82, 1)', width=3)\n                ))\n            \n            # Add surplus as area chart if available\n            if 'surplus_energy_kwh' in hourly_data.columns:\n                fig.add_trace(go.Scatter(\n                    x=hourly_data['hour'],\n                    y=hourly_data['surplus_energy_kwh'],\n                    name='Surplus/Tekort',\n                    fill='tozeroy',\n                    mode='none',\n                    fillcolor='rgba(0, 100, 80, 0.2)'\n                ))\n            \n            # Customize layout\n            fig.update_layout(\n                title='Gemiddeld Dagpatroon',\n                xaxis_title='Uur van de dag',\n                yaxis_title='Gemiddelde energie (kWh)',\n                template='plotly_white',\n                legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),\n                xaxis=dict(tickmode='array', tickvals=list(range(0, 24, 2)))\n            )\n            \n            st.plotly_chart(fig, use_container_width=True)\n            \n            # Add explanation\n            st.markdown("""\n            **Toelichting:**\n            \n            De grafiek toont het gemiddelde dagpatroon van productie en verbruik per uur.\n            Dit geeft inzicht in wanneer gemiddeld het meeste surplus beschikbaar is voor opslag\n            en wanneer opgeslagen energie gebruikt kan worden.\n            """)\n        else:\n            st.warning("Onvoldoende data beschikbaar voor dagpatroon analyse.")\n    \n    # Tab 4: Seasonal Patterns\n    with tabs[3]:\n        st.subheader("Seizoenspatronen")\n        \n        # Get seasonal averages\n        seasonal_data = data_processor.get_seasonal_averages()\n        \n        if not seasonal_data.empty:\n            # Create custom chart using plotly\n            import plotly.graph_objects as go\n            \n            fig = go.Figure()\n            \n            # Add production trace\n            if 'Energy Produced (kWh)' in seasonal_data.columns:\n                fig.add_trace(go.Bar(\n                    x=seasonal_data['season'],\n                    y=seasonal_data['Energy Produced (kWh)'],\n                    name='Gemiddelde Productie',\n                    marker_color='rgba(50, 171, 96, 0.7)'\n                ))\n            \n            # Add consumption trace\n            if 'Energy Consumed (kWh)' in seasonal_data.columns:\n                fig.add_trace(go.Bar(\n                    x=seasonal_data['season'],\n                    y=seasonal_data['Energy Consumed (kWh)'],\n                    name='Gemiddelde Verbruik',\n                    marker_color='rgba(219, 64, 82, 0.7)'\n                ))\n            \n            # Customize layout\n            fig.update_layout(\n                title='Gemiddeld Seizoenspatroon (per dag)',\n                xaxis_title='Seizoen',\n                yaxis_title='Gemiddelde energie (kWh/dag)',\n                template='plotly_white',\n                barmode='group',\n                legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)\n            )\n            \n            st.plotly_chart(fig, use_container_width=True)\n            \n            # Add explanation\n            st.markdown("""\n            **Toelichting:**\n            \n            De grafiek toont het gemiddelde productie- en verbruikspatroon per seizoen.\n            Dit geeft inzicht in seizoensgebonden fluctuaties die van invloed kunnen zijn\n            op de effectiviteit van verschillende opslagoplossingen.\n            """)\n        else:\n            st.warning("Onvoldoende data beschikbaar voor seizoenspatroon analyse.")\n    \n    # Tab 5: Comparison of Solutions\n    with tabs[4]:\n        st.subheader("Vergelijking Opslagoplossingen")\n        \n        # Check if both calculation results are available\n        has_boiler = 'boiler_results' in st.session_state and st.session_state['boiler_results']\n        has_battery = 'battery_results' in st.session_state and st.session_state['battery_results']\n        \n        if has_boiler or has_battery:\n            # Create comparison data\n            comparison_data = {}\n            \n            if has_boiler:\n                boiler_results = st.session_state['boiler_results']\n                # Get financial savings\n                comparison_data['Warmwaterboiler'] = boiler_results.get('total_financial_savings', 0)\n            \n            if has_battery:\n                battery_results = st.session_state['battery_results']\n                # Get financial benefits\n                comparison_data['Thuisbatterij'] = battery_results.get('total_financial_benefit_eur', 0)\n            \n            # Create comparison chart\n            fig = viz.plot_comparison_chart(\n                comparison_data, \n                title='Financiële besparing per opslagoptie (€)'\n            )\n            st.plotly_chart(fig, use_container_width=True)\n            \n            # Add detailed comparison if both solutions are calculated\n            if has_boiler and has_battery:\n                boiler_savings = st.session_state['boiler_results'].get('total_financial_savings', 0)\n                battery_savings = st.session_state['battery_results'].get('total_financial_benefit_eur', 0)\n                \n                # Create comparison table\n                comparison_df = pd.DataFrame({\n                    'Metric': [\n                        'Financiële besparing (€)',\n                        'Energieopslag benut (kWh)',\n                        'Percentage surplus benut (%)',\n                        'Investering terugverdientijd (jaar)'  # Example - would need actual data\n                    ],\n                    'Warmwaterboiler': [\n                        f"€ {boiler_savings:.2f}",\n                        f"{st.session_state['boiler_results'].get('total_energy_used_kwh', 0):.1f} kWh",\n                        f"{st.session_state['boiler_results'].get('surplus_utilization_percent', 0):.1f}%",\n                        "4-8"  # Example - would need actual calculation\n                    ],\n                    'Thuisbatterij': [\n                        f"€ {battery_savings:.2f}",\n                        f"{st.session_state['battery_results'].get('total_charged_kwh', 0):.1f} kWh",\n                        f"{st.session_state['battery_results'].get('surplus_utilization_percent', 0):.1f}%",\n                        "8-15"  # Example - would need actual calculation\n                    ]\n                })\n                \n                st.dataframe(comparison_df, use_container_width=True)\n                \n                # Add recommendation\n                st.markdown("### Aanbeveling")\n                \n                if boiler_savings > battery_savings * 1.2:  # 20% better\n                    st.success(\n                        "De warmwaterboiler lijkt financieel voordeliger te zijn op basis van de huidige data en parameters. "\n                        "Het heeft een betere verhouding tussen investering en opbrengst."\n                    )\n                elif battery_savings > boiler_savings * 1.2:  # 20% better\n                    st.success(\n                        "De thuisbatterij lijkt financieel voordeliger te zijn op basis van de huidige data en parameters. "\n                        "Het biedt een betere benutting van de opgewekte energie."\n                    )\n                else:\n                    st.info(\n                        "Beide oplossingen lijken vergelijkbare financiële voordelen te bieden. "\n                        "Overweeg andere factoren zoals installatiegemak, ruimtebeslag, of combineer beide oplossingen voor maximaal voordeel."\n                    )\n            \n        else:\n            st.info(\n                "Bereken eerst de resultaten voor de warmwaterboiler en/of thuisbatterij via de bijbehorende "\n                "pagina's om een vergelijking te kunnen maken."\n            )\n            \n            col1, col2 = st.columns(2)\n            \n            with col1:\n                st.button(\n                    "Naar Warmwaterboiler", \n                    on_click=lambda: setattr(st.session_state, 'active_page', 'Warmwaterboiler')\n                )\n                \n            with col2:\n                st.button(\n                    "Naar Accu", \n                    on_click=lambda: setattr(st.session_state, 'active_page', 'Accu')\n                )