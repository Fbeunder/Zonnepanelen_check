"""\nBattery page module for the Zonnepanelen_check application.\n\nThis module contains the battery storage analysis page functionality.\n"""\nimport streamlit as st\nimport sys\nimport pathlib\n\n# Voeg de root directory toe aan het pad voor juiste imports\nsys.path.append(str(pathlib.Path(__file__).parent.parent))\nfrom battery_module import BatteryCalculator\nimport visualization as viz\nfrom components.data_display import show_storage_results\n\n\ndef show_battery_page(data_processor, config_manager):\n    """\n    Display the battery storage analysis page.\n    \n    Args:\n        data_processor: Instance of DataProcessor\n        config_manager: Instance of ConfigManager\n    """\n    st.header("Accu Analyse")\n    \n    # Check if data is loaded\n    if data_processor.data is None:\n        st.warning("Geen data geladen. Ga naar de 'Data Upload' pagina om data te laden.")\n        st.button("Naar Data Upload", on_click=lambda: setattr(st.session_state, 'active_page', 'Data Upload'))\n        return\n    \n    col1, col2 = st.columns([1, 2])\n    \n    with col1:\n        st.subheader("Accu Instellingen")\n        \n        # Get battery configuration\n        battery_config = config_manager.get_section('battery')\n        economic_config = config_manager.get_section('economic')\n        \n        # Battery settings\n        battery_capacity = st.number_input(\n            "Accu capaciteit (kWh)",\n            min_value=1.0,\n            max_value=30.0,\n            value=float(battery_config.get('capacity', 5.0)),\n            step=0.5\n        )\n        \n        battery_efficiency = st.slider(\n            "Accu efficiëntie (%)",\n            min_value=70,\n            max_value=99,\n            value=int(battery_config.get('efficiency', 0.9) * 100),\n            step=1\n        ) / 100\n        \n        depth_of_discharge = st.slider(\n            "Maximale ontlading (%)",\n            min_value=10,\n            max_value=100,\n            value=int(battery_config.get('depth_of_discharge', 0.8) * 100),\n            step=5,\n            help="Percentage van de accu-capaciteit dat maximaal gebruikt kan worden"\n        ) / 100\n        \n        max_charge_rate = st.number_input(\n            "Maximale laadsnelheid (kW)",\n            min_value=0.5,\n            max_value=10.0,\n            value=float(battery_config.get('max_charge_rate', 3.6)),\n            step=0.1\n        )\n        \n        electricity_price = st.number_input(\n            "Elektriciteitsprijs (€/kWh)",\n            min_value=0.01,\n            max_value=1.0,\n            value=float(economic_config.get('electricity_price', 0.22)),\n            step=0.01\n        )\n        \n        # Update configuration\n        config_manager.update_section('battery', {\n            'capacity': battery_capacity,\n            'efficiency': battery_efficiency,\n            'depth_of_discharge': depth_of_discharge,\n            'max_charge_rate': max_charge_rate\n        })\n        \n        config_manager.update_section('economic', {\n            'electricity_price': electricity_price\n        })\n        \n        # Calculate button\n        calculate_button = st.button("Berekenen", type="primary")\n    \n    with col2:\n        st.subheader("Beschrijving")\n        st.markdown("""\n        De accu module berekent hoeveel elektriciteit u kunt besparen door overtollige\n        energie van uw zonnepanelen op te slaan in een thuisbatterij.\n        \n        ### Hoe werkt het?\n        \n        1. De applicatie analyseert de momenten waarop uw productie hoger is dan uw verbruik\n        2. Deze surplus energie wordt opgeslagen in de accu, rekening houdend met laadsnelheid en capaciteit\n        3. Wanneer uw verbruik hoger is dan uw productie, wordt energie uit de accu gebruikt\n        4. De besparing wordt uitgedrukt in vermeden inkoop van elektriciteit en financiële besparing\n        \n        ### Parameters\n        \n        - **Accu capaciteit**: Totale opslagcapaciteit van de accu in kWh\n        - **Accu efficiëntie**: Hoeveel energie effectief wordt opgeslagen en teruggeleverd\n        - **Maximale ontlading**: Percentage van de accu-capaciteit dat maximaal gebruikt kan worden\n        - **Maximale laadsnelheid**: De maximale snelheid waarmee de accu kan worden opgeladen\n        - **Elektriciteitsprijs**: Actuele elektriciteitsprijs per kWh (inkoop)\n        """)\n    \n    # Run calculation if button is pressed or previous results exist\n    if calculate_button or 'battery_results' in st.session_state:\n        st.divider()\n        \n        # Only calculate if button is pressed (to avoid recalculating on page navigation)\n        if calculate_button:\n            with st.spinner("Bezig met berekenen..."):\n                # Create configuration for calculation\n                config = {\n                    'battery': config_manager.get_section('battery'),\n                    'economic': config_manager.get_section('economic')\n                }\n                \n                # Create calculator and run calculation\n                battery_calculator = BatteryCalculator(data_processor.data, config)\n                results = battery_calculator.calculate()\n                \n                # Store in session state\n                st.session_state['battery_results'] = results\n                \n                # Show success message\n                st.success("Berekening voltooid!")\n        \n        # Display results from session state\n        if 'battery_results' in st.session_state:\n            results = st.session_state['battery_results']\n            \n            if results:\n                # Display key metrics\n                show_storage_results('battery', results)\n                \n                # Show battery state chart\n                st.subheader("Accu Laadtoestand en Energiestromen")\n                fig = viz.plot_battery_state(results)\n                st.plotly_chart(fig, use_container_width=True)