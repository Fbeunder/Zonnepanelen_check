"""\nConfiguration page module for the Zonnepanelen_check application.\n\nThis module contains the configuration page functionality.\n"""\nimport streamlit as st\nimport sys\nimport pathlib\nimport json\n\n# Voeg de root directory toe aan het pad voor juiste imports\nsys.path.append(str(pathlib.Path(__file__).parent.parent))\nfrom utils.ui_helpers import create_download_link\n\n\ndef show_configuration_page(config_manager):\n    """\n    Display the configuration page.\n    \n    Args:\n        config_manager: Instance of ConfigManager\n    """\n    st.header("Configuratie")\n    \n    # Create tabs for different configuration sections\n    tabs = st.tabs(["Algemeen", "Economisch", "Warmwaterboiler", "Accu", "Import/Export"])\n    \n    # Tab 1: General Configuration\n    with tabs[0]:\n        st.subheader("Algemene Instellingen")\n        \n        # Get general configuration\n        general_config = config_manager.get_section('general')\n        \n        # App preferences\n        dark_mode = st.toggle(\n            "Donkere modus",\n            value=general_config.get('dark_mode', False),\n            help="Schakel donkere modus in voor de applicatie"\n        )\n        \n        show_tooltips = st.toggle(\n            "Toon tooltips",\n            value=general_config.get('show_tooltips', True),\n            help="Toon uitleg bij invoervelden en grafieken"\n        )\n        \n        language = st.selectbox(\n            "Taal",\n            options=["Nederlands", "Engels"],\n            index=0 if general_config.get('language', 'nl') == 'nl' else 1,\n            help="Selecteer de taal voor de applicatie"\n        )\n        \n        # Update configuration\n        config_manager.update_section('general', {\n            'dark_mode': dark_mode,\n            'show_tooltips': show_tooltips,\n            'language': 'nl' if language == "Nederlands" else 'en'\n        })\n        \n        st.success("Instellingen opgeslagen!")\n    \n    # Tab 2: Economic Configuration\n    with tabs[1]:\n        st.subheader("Economische Parameters")\n        \n        # Get economic configuration\n        economic_config = config_manager.get_section('economic')\n        \n        # Energy prices\n        electricity_price = st.number_input(\n            "Elektriciteitsprijs (€/kWh)",\n            min_value=0.01,\n            max_value=1.0,\n            value=float(economic_config.get('electricity_price', 0.22)),\n            step=0.01\n        )\n        \n        feed_in_tariff = st.number_input(\n            "Terugleververgoeding (€/kWh)",\n            min_value=0.0,\n            max_value=0.5,\n            value=float(economic_config.get('feed_in_tariff', 0.08)),\n            step=0.01\n        )\n        \n        gas_price = st.number_input(\n            "Gasprijs (€/m³)",\n            min_value=0.01,\n            max_value=5.0,\n            value=float(economic_config.get('gas_price', 0.80)),\n            step=0.01\n        )\n        \n        # Update configuration\n        config_manager.update_section('economic', {\n            'electricity_price': electricity_price,\n            'feed_in_tariff': feed_in_tariff,\n            'gas_price': gas_price\n        })\n        \n        st.success("Economische parameters opgeslagen!")\n    \n    # Tab 3: Water Boiler Configuration\n    with tabs[2]:\n        st.subheader("Warmwaterboiler Instellingen")\n        \n        # Get boiler configuration\n        boiler_config = config_manager.get_section('boiler')\n        \n        # Boiler settings\n        boiler_capacity = st.number_input(\n            "Boiler capaciteit (Liter)",\n            min_value=10,\n            max_value=500,\n            value=int(boiler_config.get('capacity', 80)),\n            step=10\n        )\n        \n        boiler_efficiency = st.slider(\n            "Boiler efficiëntie (%)",\n            min_value=50,\n            max_value=100,\n            value=int(boiler_config.get('efficiency', 0.9) * 100),\n            step=5\n        ) / 100\n        \n        daily_hot_water = st.number_input(\n            "Dagelijks warmwaterverbruik (Liter)",\n            min_value=10,\n            max_value=500,\n            value=int(boiler_config.get('daily_hot_water_usage', 120)),\n            step=10\n        )\n        \n        water_temp_rise = st.number_input(\n            "Temperatuurstijging (°C)",\n            min_value=10,\n            max_value=70,\n            value=int(boiler_config.get('water_temperature_rise', 35)),\n            step=5,\n            help="Temperatuurverschil tussen koud en warm water"\n        )\n        \n        # Update configuration\n        config_manager.update_section('boiler', {\n            'capacity': boiler_capacity,\n            'efficiency': boiler_efficiency,\n            'daily_hot_water_usage': daily_hot_water,\n            'water_temperature_rise': water_temp_rise\n        })\n        \n        st.success("Warmwaterboiler instellingen opgeslagen!")\n    \n    # Tab 4: Battery Configuration\n    with tabs[3]:\n        st.subheader("Accu Instellingen")\n        \n        # Get battery configuration\n        battery_config = config_manager.get_section('battery')\n        \n        # Battery settings\n        battery_capacity = st.number_input(\n            "Accu capaciteit (kWh)",\n            min_value=1.0,\n            max_value=30.0,\n            value=float(battery_config.get('capacity', 5.0)),\n            step=0.5\n        )\n        \n        battery_efficiency = st.slider(\n            "Accu efficiëntie (%)",\n            min_value=70,\n            max_value=99,\n            value=int(battery_config.get('efficiency', 0.9) * 100),\n            step=1\n        ) / 100\n        \n        depth_of_discharge = st.slider(\n            "Maximale ontlading (%)",\n            min_value=10,\n            max_value=100,\n            value=int(battery_config.get('depth_of_discharge', 0.8) * 100),\n            step=5,\n            help="Percentage van de accu-capaciteit dat maximaal gebruikt kan worden"\n        ) / 100\n        \n        max_charge_rate = st.number_input(\n            "Maximale laadsnelheid (kW)",\n            min_value=0.5,\n            max_value=10.0,\n            value=float(battery_config.get('max_charge_rate', 3.6)),\n            step=0.1\n        )\n        \n        # Update configuration\n        config_manager.update_section('battery', {\n            'capacity': battery_capacity,\n            'efficiency': battery_efficiency,\n            'depth_of_discharge': depth_of_discharge,\n            'max_charge_rate': max_charge_rate\n        })\n        \n        st.success("Accu instellingen opgeslagen!")\n    \n    # Tab 5: Import/Export Configuration\n    with tabs[4]:\n        st.subheader("Import/Export Configuratie")\n        \n        col1, col2 = st.columns(2)\n        \n        with col1:\n            st.markdown("### Export Configuratie")\n            \n            # Export current configuration to JSON\n            if st.button("Exporteer Configuratie"):\n                config_json = json.dumps(config_manager.get_all(), indent=2)\n                st.markdown(\n                    create_download_link(config_json, "zonnepanelen_check_config.json", "Download Configuratie"),\n                    unsafe_allow_html=True\n                )\n        \n        with col2:\n            st.markdown("### Import Configuratie")\n            \n            # Import configuration from JSON file\n            uploaded_file = st.file_uploader("Upload configuratiebestand", type="json")\n            \n            if uploaded_file is not None:\n                try:\n                    # Read and parse the JSON file\n                    config_json = json.loads(uploaded_file.getvalue().decode())\n                    \n                    # Update all configuration sections\n                    for section, values in config_json.items():\n                        config_manager.update_section(section, values)\n                    \n                    st.success("Configuratie succesvol geïmporteerd!")\n                    st.rerun()  # Refresh the page to show updated values\n                except Exception as e:\n                    st.error(f"Fout bij importeren configuratie: {str(e)}")