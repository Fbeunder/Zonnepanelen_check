"""\nBoiler page module for the Zonnepanelen_check application.\n\nThis module contains the water boiler analysis page functionality.\n"""\nimport streamlit as st\nimport sys\nimport pathlib\n\n# Voeg de root directory toe aan het pad voor juiste imports\nsys.path.append(str(pathlib.Path(__file__).parent.parent))\nfrom boiler_module import BoilerCalculator\nimport visualization as viz\nfrom components.data_display import show_storage_results\n\n\ndef show_boiler_page(data_processor, config_manager):\n    """\n    Display the water boiler analysis page.\n    \n    Args:\n        data_processor: Instance of DataProcessor\n        config_manager: Instance of ConfigManager\n    """\n    st.header("Warmwaterboiler Analyse")\n    \n    # Check if data is loaded\n    if data_processor.data is None:\n        st.warning("Geen data geladen. Ga naar de 'Data Upload' pagina om data te laden.")\n        st.button("Naar Data Upload", on_click=lambda: setattr(st.session_state, 'active_page', 'Data Upload'))\n        return\n    \n    col1, col2 = st.columns([1, 2])\n    \n    with col1:\n        st.subheader("Boiler Instellingen")\n        \n        # Get boiler configuration\n        boiler_config = config_manager.get_section('boiler')\n        economic_config = config_manager.get_section('economic')\n        \n        # Boiler settings\n        boiler_capacity = st.number_input(\n            "Boiler capaciteit (Liter)",\n            min_value=10,\n            max_value=500,\n            value=int(boiler_config.get('capacity', 80)),\n            step=10\n        )\n        \n        boiler_efficiency = st.slider(\n            "Boiler efficiëntie (%)",\n            min_value=50,\n            max_value=100,\n            value=int(boiler_config.get('efficiency', 0.9) * 100),\n            step=5\n        ) / 100\n        \n        daily_hot_water = st.number_input(\n            "Dagelijks warmwaterverbruik (Liter)",\n            min_value=10,\n            max_value=500,\n            value=int(boiler_config.get('daily_hot_water_usage', 120)),\n            step=10\n        )\n        \n        water_temp_rise = st.number_input(\n            "Temperatuurstijging (°C)",\n            min_value=10,\n            max_value=70,\n            value=int(boiler_config.get('water_temperature_rise', 35)),\n            step=5,\n            help="Temperatuurverschil tussen koud en warm water"\n        )\n        \n        gas_price = st.number_input(\n            "Gasprijs (€/m³)",\n            min_value=0.01,\n            max_value=5.0,\n            value=float(economic_config.get('gas_price', 0.80)),\n            step=0.01\n        )\n        \n        # Update configuration\n        config_manager.update_section('boiler', {\n            'capacity': boiler_capacity,\n            'efficiency': boiler_efficiency,\n            'daily_hot_water_usage': daily_hot_water,\n            'water_temperature_rise': water_temp_rise\n        })\n        \n        config_manager.update_section('economic', {\n            'gas_price': gas_price\n        })\n        \n        # Calculate button\n        calculate_button = st.button("Berekenen", type="primary")\n    \n    with col2:\n        st.subheader("Beschrijving")\n        st.markdown("""\n        De warmwaterboiler module berekent hoeveel gas u kunt besparen door overtollige\n        energie van uw zonnepanelen te gebruiken voor het verwarmen van water.\n        \n        ### Hoe werkt het?\n        \n        1. De applicatie analyseert de momenten waarop uw productie hoger is dan uw verbruik\n        2. Deze surplus energie kan worden gebruikt om water te verwarmen in plaats van teruggeleverd aan het net\n        3. De berekening houdt rekening met uw dagelijkse warmwaterverbruik en de capaciteit van de boiler\n        4. De besparing wordt uitgedrukt in kubieke meters gas en financiële besparing\n        \n        ### Parameters\n        \n        - **Boiler capaciteit**: Totale capaciteit van de warmwaterboiler in liters\n        - **Boiler efficiëntie**: Hoeveel energie effectief wordt omgezet in warmte\n        - **Dagelijks warmwaterverbruik**: Gemiddeld dagelijks warmwaterverbruik in liters\n        - **Temperatuurstijging**: Verschil tussen inkomend koud water en gewenst warm water\n        - **Gasprijs**: Actuele gasprijs per kubieke meter\n        """)\n    \n    # Run calculation if button is pressed or previous results exist\n    if calculate_button or 'boiler_results' in st.session_state:\n        st.divider()\n        \n        # Only calculate if button is pressed (to avoid recalculating on page navigation)\n        if calculate_button:\n            with st.spinner("Bezig met berekenen..."):\n                # Create configuration for calculation\n                config = {\n                    'boiler': config_manager.get_section('boiler'),\n                    'economic': config_manager.get_section('economic')\n                }\n                \n                # Create calculator and run calculation\n                boiler_calculator = BoilerCalculator(data_processor.data, config)\n                results = boiler_calculator.calculate()\n                \n                # Store in session state\n                st.session_state['boiler_results'] = results\n                \n                # Show success message\n                st.success("Berekening voltooid!")\n        \n        # Display results from session state\n        if 'boiler_results' in st.session_state:\n            results = st.session_state['boiler_results']\n            \n            if results:\n                # Display key metrics\n                show_storage_results('boiler', results)\n                \n                # Show boiler energy usage chart\n                st.subheader("Boiler Energiegebruik en Gasbesparing")\n                fig = viz.plot_boiler_energy_usage(results)\n                st.plotly_chart(fig, use_container_width=True)